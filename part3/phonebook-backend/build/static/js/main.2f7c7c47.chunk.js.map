{"version":3,"sources":["services/phonebook.js","component/Filter.jsx","component/PersonForm.jsx","component/Persons.jsx","component/Notification.jsx","App.js","index.js"],"names":["url","Filter","filter","onChange","PersonForm","addPerson","handleNameChange","handleNumberChange","onSubmit","type","Persons","person","deletePerson","name","number","onClick","id","Notification","message","console","log","className","body","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","showPersons","setShowPersons","setMessage","useEffect","axios","get","then","res","data","deletePersonWith","window","confirm","delete","p","catch","err","setTimeout","location","reload","e","n","target","value","sp","toLowerCase","includes","preventDefault","ok","checkDuplicates","put","update","map","post","concat","msg","String","response","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f7c7c47.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url = \"/api/persons\";\n\nconst getAll = () => {\n  return axios.get(url).then((res) => res.data);\n};\n\nconst create = (person) => {\n  return axios.post(url, person).then((res) => res.data);\n};\n\nconst update = (id, person) => {\n  return axios.put(`${url}/${id}`, person).then((res) => res.data);\n};\n\nconst remove = (id) => {\n  return axios.delete(`${url}/${id}`).then((res) => res.data);\n};\n\nexport { getAll, create, update, remove };\n","import React from \"react\";\n\nconst Filter = ({ filter }) => {\n  return (\n    <div>\n      filter shown with <input onChange={filter} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\n\nconst PersonForm = ({ addPerson, handleNameChange, handleNumberChange }) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        name: <input onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst Persons = ({ person, deletePerson }) => {\n  return (\n    <div key={person.id}>\n      {person.name} {person.number}{\" \"}\n      <button onClick={deletePerson}>delete</button>\n    </div>\n  );\n};\n\nexport default Persons;\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  console.log(message);\n  if (message === null) {\n    return null;\n  }\n\n  return <div className={message.type}>{message.body}</div>;\n};\n\nexport default Notification;\n","import { getAll, create, update, remove } from \"./services/phonebook\";\nimport React, { useEffect, useState } from \"react\";\nimport Filter from \"./component/Filter\";\nimport PersonForm from \"./component/PersonForm\";\nimport Persons from \"./component/Persons\";\nimport Notification from \"./component/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [showPersons, setShowPersons] = useState([]);\n  const [message, setMessage] = useState({});\n\n  useEffect(() => {\n    getAll().then((res) => {\n      setPersons(res);\n      setShowPersons(res);\n    });\n  }, []);\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const checkDuplicates = () => {\n    const ok = persons.filter((p) => p.name === newName);\n    console.log(ok);\n    return ok[0];\n    // const names = [];\n    // persons.forEach((p) => names.push(p.name));\n    // return !names.includes(newName);\n  };\n\n  const addPerson = (e) => {\n    e.preventDefault();\n    const ok = checkDuplicates();\n    console.log(ok);\n    if (!ok) {\n      const newPerson = { name: newName, number: newNumber };\n      create(newPerson)\n        .then((res) => {\n          setPersons(persons.concat(res));\n          setShowPersons(showPersons.concat(res));\n          setMessage({ type: \"popup\", body: `Added ${newName}` });\n          setTimeout(() => {\n            setMessage({});\n          }, 3000);\n        })\n        .catch((err) => {\n          const msg = String(err.response.data.error);\n          setMessage({ type: \"error\", body: msg });\n          setTimeout(() => {\n            setMessage({});\n          }, 3000);\n        });\n    } else {\n      window.confirm(\n        `${newName} is already added to phonebook, replace the old number with new one?`\n      ) &&\n        update(ok.id, { ...ok, number: newNumber }).then((res) => {\n          setPersons(persons.map((p) => (p.id !== ok.id ? p : res)));\n          setShowPersons(showPersons.map((p) => (p.id !== ok.id ? p : res)));\n          setMessage({ type: \"popup\", body: `Modified ${newName}` });\n          setTimeout(() => {\n            setMessage({});\n          }, 3000);\n        });\n    }\n  };\n\n  const filter = (e) => {\n    setShowPersons(persons);\n    const n = e.target.value;\n    const sp = persons.filter((p) =>\n      p.name.toLowerCase().includes(n.toLowerCase())\n    );\n    setShowPersons(sp);\n    console.log(sp);\n  };\n\n  const deletePersonWith = (person) => {\n    window.confirm(`Delete ${person.name}`) &&\n      remove(person.id)\n        .then((res) => {\n          setPersons(persons.filter((p) => p.id !== person.id));\n          setShowPersons(showPersons.filter((p) => p.id !== person.id));\n        })\n        .catch((err) => {\n          setMessage({\n            type: \"error\",\n            body: `Information of ${person.name} has already been removed from the server`,\n          });\n          setTimeout(() => {\n            setMessage({});\n            window.location.reload();\n          }, 3000);\n        });\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter filter={filter} />\n      <h2>add a new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      {showPersons.map((person) => {\n        return (\n          <Persons\n            key={person.id}\n            person={person}\n            deletePerson={() => deletePersonWith(person)}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}